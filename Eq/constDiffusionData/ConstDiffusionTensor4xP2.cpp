#include <ConstDiffusionModDecl.h> 
double ConstDiffusionVol4xTensorP2_diffDirs2(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 4.0*nu[1]/(dx[1]*dx[1]); 

  out[12] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[20] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[22] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[26] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[33] += 6.708203932499369*rdxFnu[0]*f[6]; 
  out[36] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[38] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[48] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[51] += 6.708203932499369*rdxFnu[0]*f[17]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[21]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[23]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[61] += 6.708203932499369*rdxFnu[0]*f[28]; 
  out[63] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[37]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[39]; 
  out[70] += 6.708203932499369*rdxFnu[0]*f[42]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[45]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[47]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[49]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[58]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[62]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[64]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[74]; 

  return (rdxFnu[0])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs23(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[1] = 4.0*nu[2]/(dx[2]*dx[2]); 

  out[12] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[20] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[22] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[24] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[26] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[33] += 6.708203932499369*rdxFnu[0]*f[6]; 
  out[34] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[36] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[38] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[1]*f[9]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[1]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[1]*f[12]; 
  out[48] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[14]; 
  out[51] += 6.708203932499369*rdxFnu[0]*f[17]; 
  out[52] += 6.708203932499369*rdxFnu[1]*f[16]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[1]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[23]+6.708203932499369*rdxFnu[1]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[1]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[1]*f[26]; 
  out[61] += 6.708203932499369*rdxFnu[0]*f[28]; 
  out[63] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[28]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[29]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[1]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[39]+6.708203932499369*rdxFnu[1]*f[36]; 
  out[70] += 6.708203932499369*rdxFnu[0]*f[42]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[41]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[45]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[47]; 
  out[74] += 6.708203932499369*rdxFnu[1]*f[47]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[48]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[58]+6.708203932499369*rdxFnu[1]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[62]; 
  out[78] += 6.708203932499369*rdxFnu[1]*f[60]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[64]+6.708203932499369*rdxFnu[1]*f[61]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[74]+6.708203932499369*rdxFnu[1]*f[73]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[1] = 4.0*nu[2]/(dx[2]*dx[2]); 
  rdxFnu[2] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[12] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[2]; 
  out[20] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[22] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[24] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[26] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[2]; 
  out[29] += 6.708203932499369*f[2]*rdxFnu[2]; 
  out[30] += 6.708203932499369*rdxFnu[2]*f[3]; 
  out[33] += 6.708203932499369*rdxFnu[0]*f[6]; 
  out[34] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[36] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[38] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[1]*f[9]; 
  out[41] += 6.708203932499369*rdxFnu[2]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[2]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[2]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[1]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[1]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[2]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[2]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[14]+6.708203932499369*rdxFnu[2]*f[13]; 
  out[51] += 6.708203932499369*rdxFnu[0]*f[17]; 
  out[52] += 6.708203932499369*rdxFnu[1]*f[16]; 
  out[53] += 6.708203932499369*rdxFnu[2]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[1]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[23]+6.708203932499369*rdxFnu[1]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[1]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[1]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[2]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[0]*f[28]+6.708203932499369*rdxFnu[2]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[2]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[2]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[28]+6.708203932499369*rdxFnu[2]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[29]+6.708203932499369*rdxFnu[2]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[1]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[39]+6.708203932499369*rdxFnu[1]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[2]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[0]*f[42]+6.708203932499369*rdxFnu[2]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[41]+6.708203932499369*rdxFnu[2]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[45]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[47]+6.708203932499369*rdxFnu[2]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[1]*f[47]+6.708203932499369*rdxFnu[2]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[48]+6.708203932499369*rdxFnu[2]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[58]+6.708203932499369*rdxFnu[1]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[62]+6.708203932499369*rdxFnu[2]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[1]*f[60]+6.708203932499369*rdxFnu[2]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[64]+6.708203932499369*rdxFnu[1]*f[61]+6.708203932499369*rdxFnu[2]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[74]+6.708203932499369*rdxFnu[1]*f[73]+6.708203932499369*rdxFnu[2]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs1234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[4]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[2] = 4.0*nu[2]/(dx[2]*dx[2]); 
  rdxFnu[3] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[12] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[2]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[3]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[20] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[22] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[2]; 
  out[24] += 6.708203932499369*f[2]*rdxFnu[2]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[26] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[2]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[3]; 
  out[29] += 6.708203932499369*f[2]*rdxFnu[3]; 
  out[30] += 6.708203932499369*f[3]*rdxFnu[3]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[33] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[34] += 6.708203932499369*rdxFnu[2]*f[5]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[36] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[38] += 6.708203932499369*rdxFnu[1]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[2]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[2]*f[9]; 
  out[41] += 6.708203932499369*rdxFnu[3]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[3]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[3]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[2]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[13]+6.708203932499369*rdxFnu[2]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[3]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[14]+6.708203932499369*rdxFnu[3]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[2]*f[14]+6.708203932499369*rdxFnu[3]*f[13]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[51] += 6.708203932499369*rdxFnu[1]*f[17]; 
  out[52] += 6.708203932499369*rdxFnu[2]*f[16]; 
  out[53] += 6.708203932499369*rdxFnu[3]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]+6.708203932499369*rdxFnu[1]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]+6.708203932499369*rdxFnu[2]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[23]+6.708203932499369*rdxFnu[2]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[2]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[27]+6.708203932499369*rdxFnu[2]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]+6.708203932499369*rdxFnu[3]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[28]+6.708203932499369*rdxFnu[3]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[3]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[30]+6.708203932499369*rdxFnu[3]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[2]*f[28]+6.708203932499369*rdxFnu[3]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[2]*f[29]+6.708203932499369*rdxFnu[3]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]+6.708203932499369*rdxFnu[1]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]+6.708203932499369*rdxFnu[2]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[39]+6.708203932499369*rdxFnu[2]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]+6.708203932499369*rdxFnu[3]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[42]+6.708203932499369*rdxFnu[3]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[2]*f[41]+6.708203932499369*rdxFnu[3]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[45]+6.708203932499369*rdxFnu[2]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[47]+6.708203932499369*rdxFnu[3]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[2]*f[47]+6.708203932499369*rdxFnu[3]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[49]+6.708203932499369*rdxFnu[2]*f[48]+6.708203932499369*rdxFnu[3]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[58]+6.708203932499369*rdxFnu[2]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[1]*f[62]+6.708203932499369*rdxFnu[3]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[2]*f[60]+6.708203932499369*rdxFnu[3]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[64]+6.708203932499369*rdxFnu[2]*f[61]+6.708203932499369*rdxFnu[3]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[74]+6.708203932499369*rdxFnu[2]*f[73]+6.708203932499369*rdxFnu[3]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2]+rdxFnu[3])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs123(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[2] = 4.0*nu[2]/(dx[2]*dx[2]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[12] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[2]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[20] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[22] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[2]; 
  out[24] += 6.708203932499369*f[2]*rdxFnu[2]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[26] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[2]*f[4]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[33] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[34] += 6.708203932499369*rdxFnu[2]*f[5]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[36] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[38] += 6.708203932499369*rdxFnu[1]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[2]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[2]*f[9]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[2]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[13]+6.708203932499369*rdxFnu[2]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[14]; 
  out[49] += 6.708203932499369*rdxFnu[2]*f[14]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[51] += 6.708203932499369*rdxFnu[1]*f[17]; 
  out[52] += 6.708203932499369*rdxFnu[2]*f[16]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]+6.708203932499369*rdxFnu[1]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]+6.708203932499369*rdxFnu[2]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[23]+6.708203932499369*rdxFnu[2]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[2]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[27]+6.708203932499369*rdxFnu[2]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[28]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[30]; 
  out[64] += 6.708203932499369*rdxFnu[2]*f[28]; 
  out[65] += 6.708203932499369*rdxFnu[2]*f[29]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]+6.708203932499369*rdxFnu[1]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]+6.708203932499369*rdxFnu[2]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[39]+6.708203932499369*rdxFnu[2]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[42]; 
  out[71] += 6.708203932499369*rdxFnu[2]*f[41]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[45]+6.708203932499369*rdxFnu[2]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[47]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[2]*f[47]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[49]+6.708203932499369*rdxFnu[2]*f[48]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[58]+6.708203932499369*rdxFnu[2]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[1]*f[62]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[2]*f[60]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[64]+6.708203932499369*rdxFnu[2]*f[61]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[74]+6.708203932499369*rdxFnu[2]*f[73]; 

  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs24(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[1] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[12] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[20] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[22] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[26] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[29] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[30] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[33] += 6.708203932499369*rdxFnu[0]*f[6]; 
  out[36] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[38] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[41] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[1]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[47] += 6.708203932499369*rdxFnu[1]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[1]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[13]; 
  out[51] += 6.708203932499369*rdxFnu[0]*f[17]; 
  out[53] += 6.708203932499369*rdxFnu[1]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[21]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[23]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[60] += 6.708203932499369*rdxFnu[1]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[0]*f[28]+6.708203932499369*rdxFnu[1]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[1]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[1]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[37]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[39]; 
  out[69] += 6.708203932499369*rdxFnu[1]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[0]*f[42]+6.708203932499369*rdxFnu[1]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[45]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[47]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[1]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[58]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[62]+6.708203932499369*rdxFnu[1]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[1]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[64]+6.708203932499369*rdxFnu[1]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[74]+6.708203932499369*rdxFnu[1]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs124(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[1]/(dx[1]*dx[1]); 
  rdxFnu[2] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[12] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[2]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[20] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[22] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[26] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[2]; 
  out[29] += 6.708203932499369*f[2]*rdxFnu[2]; 
  out[30] += 6.708203932499369*rdxFnu[2]*f[3]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[33] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[36] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[38] += 6.708203932499369*rdxFnu[1]*f[10]; 
  out[41] += 6.708203932499369*rdxFnu[2]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[2]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[2]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[13]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[2]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[14]+6.708203932499369*rdxFnu[2]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[2]*f[13]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[51] += 6.708203932499369*rdxFnu[1]*f[17]; 
  out[53] += 6.708203932499369*rdxFnu[2]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]+6.708203932499369*rdxFnu[1]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[23]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[27]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]+6.708203932499369*rdxFnu[2]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[28]+6.708203932499369*rdxFnu[2]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[2]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[30]+6.708203932499369*rdxFnu[2]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[2]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[2]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]+6.708203932499369*rdxFnu[1]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[39]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]+6.708203932499369*rdxFnu[2]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[42]+6.708203932499369*rdxFnu[2]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[2]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[45]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[47]+6.708203932499369*rdxFnu[2]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[2]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[49]+6.708203932499369*rdxFnu[2]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[58]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[1]*f[62]+6.708203932499369*rdxFnu[2]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[2]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[64]+6.708203932499369*rdxFnu[2]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[74]+6.708203932499369*rdxFnu[2]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs12(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[1]/(dx[1]*dx[1]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[12] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[20] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[22] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[26] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[33] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[36] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[38] += 6.708203932499369*rdxFnu[1]*f[10]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[13]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[14]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[51] += 6.708203932499369*rdxFnu[1]*f[17]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]+6.708203932499369*rdxFnu[1]*f[21]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[23]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[27]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[28]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[30]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]+6.708203932499369*rdxFnu[1]*f[37]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[39]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[42]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[45]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[47]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[49]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[58]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[1]*f[62]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[64]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[74]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs3(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 4.0*nu[2]/(dx[2]*dx[2]); 

  out[13] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[23] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[24] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[27] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[34] += 6.708203932499369*rdxFnu[0]*f[5]; 
  out[39] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[52] += 6.708203932499369*rdxFnu[0]*f[16]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[20]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[64] += 6.708203932499369*rdxFnu[0]*f[28]; 
  out[65] += 6.708203932499369*rdxFnu[0]*f[29]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[36]; 
  out[71] += 6.708203932499369*rdxFnu[0]*f[41]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[47]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[48]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[57]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[60]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[61]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[73]; 

  return (rdxFnu[0])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs34(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[2]/(dx[2]*dx[2]); 
  rdxFnu[1] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[13] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[23] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[24] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[27] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[29] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[30] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[34] += 6.708203932499369*rdxFnu[0]*f[5]; 
  out[39] += 6.708203932499369*rdxFnu[0]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[41] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[1]*f[7]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[1]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[1]*f[13]; 
  out[52] += 6.708203932499369*rdxFnu[0]*f[16]; 
  out[53] += 6.708203932499369*rdxFnu[1]*f[15]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[0]*f[20]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[1]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[1]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[0]*f[28]+6.708203932499369*rdxFnu[1]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[0]*f[29]+6.708203932499369*rdxFnu[1]*f[24]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[0]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[1]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[0]*f[41]+6.708203932499369*rdxFnu[1]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[1]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[47]+6.708203932499369*rdxFnu[1]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[1]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[60]+6.708203932499369*rdxFnu[1]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[61]+6.708203932499369*rdxFnu[1]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[73]+6.708203932499369*rdxFnu[1]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs134(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[2]/(dx[2]*dx[2]); 
  rdxFnu[2] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[2]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[24] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[2]; 
  out[29] += 6.708203932499369*f[2]*rdxFnu[2]; 
  out[30] += 6.708203932499369*rdxFnu[2]*f[3]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[34] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[1]*f[9]; 
  out[41] += 6.708203932499369*rdxFnu[2]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[2]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[2]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[2]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[2]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[14]+6.708203932499369*rdxFnu[2]*f[13]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[52] += 6.708203932499369*rdxFnu[1]*f[16]; 
  out[53] += 6.708203932499369*rdxFnu[2]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]+6.708203932499369*rdxFnu[1]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]+6.708203932499369*rdxFnu[2]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[2]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[2]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[2]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[28]+6.708203932499369*rdxFnu[2]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[29]+6.708203932499369*rdxFnu[2]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]+6.708203932499369*rdxFnu[1]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]+6.708203932499369*rdxFnu[2]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[2]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[41]+6.708203932499369*rdxFnu[2]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[2]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[47]+6.708203932499369*rdxFnu[2]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[48]+6.708203932499369*rdxFnu[2]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[2]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[1]*f[60]+6.708203932499369*rdxFnu[2]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[61]+6.708203932499369*rdxFnu[2]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[73]+6.708203932499369*rdxFnu[2]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs13(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[2]/(dx[2]*dx[2]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[13] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[23] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[24] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[27] += 6.708203932499369*rdxFnu[1]*f[4]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[34] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[39] += 6.708203932499369*rdxFnu[1]*f[8]; 
  out[40] += 6.708203932499369*rdxFnu[1]*f[9]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[46] += 6.708203932499369*rdxFnu[1]*f[12]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[14]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[52] += 6.708203932499369*rdxFnu[1]*f[16]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]+6.708203932499369*rdxFnu[1]*f[19]; 
  out[56] += 6.708203932499369*rdxFnu[1]*f[20]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]+6.708203932499369*rdxFnu[1]*f[25]; 
  out[59] += 6.708203932499369*rdxFnu[1]*f[26]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[28]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[29]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]+6.708203932499369*rdxFnu[1]*f[35]; 
  out[68] += 6.708203932499369*rdxFnu[1]*f[36]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[41]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[47]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[48]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]+6.708203932499369*rdxFnu[1]*f[57]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[1]*f[60]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[61]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[73]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs4(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[14] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[28] += 6.708203932499369*rdxFnu[0]*f[1]; 
  out[29] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[30] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[41] += 6.708203932499369*rdxFnu[0]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[0]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[53] += 6.708203932499369*rdxFnu[0]*f[15]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[0]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[0]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[0]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[0]*f[24]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[0]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[0]*f[34]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[0]*f[46]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[0]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[72]; 

  return (rdxFnu[0])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs14(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 
  rdxFnu[1] = 4.0*nu[3]/(dx[3]*dx[3]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[14] += 6.708203932499369*f[0]*rdxFnu[1]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[28] += 6.708203932499369*f[1]*rdxFnu[1]; 
  out[29] += 6.708203932499369*rdxFnu[1]*f[2]; 
  out[30] += 6.708203932499369*rdxFnu[1]*f[3]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[41] += 6.708203932499369*rdxFnu[1]*f[5]; 
  out[42] += 6.708203932499369*rdxFnu[1]*f[6]; 
  out[43] += 6.708203932499369*rdxFnu[1]*f[7]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]+6.708203932499369*rdxFnu[1]*f[11]; 
  out[48] += 6.708203932499369*rdxFnu[1]*f[12]; 
  out[49] += 6.708203932499369*rdxFnu[1]*f[13]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[53] += 6.708203932499369*rdxFnu[1]*f[15]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]+6.708203932499369*rdxFnu[1]*f[19]; 
  out[61] += 6.708203932499369*rdxFnu[1]*f[20]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]+6.708203932499369*rdxFnu[1]*f[21]; 
  out[63] += 6.708203932499369*rdxFnu[1]*f[22]; 
  out[64] += 6.708203932499369*rdxFnu[1]*f[23]; 
  out[65] += 6.708203932499369*rdxFnu[1]*f[24]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]+6.708203932499369*rdxFnu[1]*f[32]; 
  out[70] += 6.708203932499369*rdxFnu[1]*f[33]; 
  out[71] += 6.708203932499369*rdxFnu[1]*f[34]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]+6.708203932499369*rdxFnu[1]*f[44]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]+6.708203932499369*rdxFnu[1]*f[45]; 
  out[75] += 6.708203932499369*rdxFnu[1]*f[46]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]+6.708203932499369*rdxFnu[1]*f[54]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]+6.708203932499369*rdxFnu[1]*f[55]; 
  out[79] += 6.708203932499369*rdxFnu[1]*f[56]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]+6.708203932499369*rdxFnu[1]*f[72]; 

  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstDiffusionVol4xTensorP2_diffDirs1(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 4.0*nu[0]/(dx[0]*dx[0]); 

  out[11] += 6.708203932499369*f[0]*rdxFnu[0]; 
  out[19] += 6.708203932499369*rdxFnu[0]*f[2]; 
  out[21] += 6.708203932499369*rdxFnu[0]*f[3]; 
  out[25] += 6.708203932499369*rdxFnu[0]*f[4]; 
  out[32] += 6.708203932499369*rdxFnu[0]*f[7]; 
  out[35] += 6.708203932499369*rdxFnu[0]*f[9]; 
  out[37] += 6.708203932499369*rdxFnu[0]*f[10]; 
  out[44] += 6.708203932499369*rdxFnu[0]*f[12]; 
  out[45] += 6.708203932499369*rdxFnu[0]*f[13]; 
  out[47] += 6.708203932499369*rdxFnu[0]*f[14]; 
  out[50] += 6.708203932499369*rdxFnu[0]*f[18]; 
  out[54] += 6.708203932499369*rdxFnu[0]*f[22]; 
  out[55] += 6.708203932499369*rdxFnu[0]*f[24]; 
  out[57] += 6.708203932499369*rdxFnu[0]*f[26]; 
  out[58] += 6.708203932499369*rdxFnu[0]*f[27]; 
  out[60] += 6.708203932499369*rdxFnu[0]*f[29]; 
  out[62] += 6.708203932499369*rdxFnu[0]*f[30]; 
  out[66] += 6.708203932499369*rdxFnu[0]*f[38]; 
  out[67] += 6.708203932499369*rdxFnu[0]*f[40]; 
  out[69] += 6.708203932499369*rdxFnu[0]*f[43]; 
  out[72] += 6.708203932499369*rdxFnu[0]*f[46]; 
  out[73] += 6.708203932499369*rdxFnu[0]*f[48]; 
  out[74] += 6.708203932499369*rdxFnu[0]*f[49]; 
  out[76] += 6.708203932499369*rdxFnu[0]*f[59]; 
  out[77] += 6.708203932499369*rdxFnu[0]*f[63]; 
  out[78] += 6.708203932499369*rdxFnu[0]*f[65]; 
  out[80] += 6.708203932499369*rdxFnu[0]*f[75]; 

  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs2(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs23(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[2] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs1234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[4]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[3] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2]+rdxFnu[3])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs123(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs24(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs124(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs12(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs3(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs34(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[1] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs134(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[2] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs13(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs4(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs14(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 16.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion4Vol4xTensorP2_diffDirs1(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 16.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs2(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs23(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[2] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs1234(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[4]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[3] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2]+rdxFnu[3])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs123(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs24(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[1] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs124(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 
  rdxFnu[2] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs12(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[1]/(dx[1]*dx[1]*dx[1]*dx[1]*dx[1]*dx[1]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs3(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs34(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[1] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs134(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[3]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 
  rdxFnu[2] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1]+rdxFnu[2])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs13(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[2]/(dx[2]*dx[2]*dx[2]*dx[2]*dx[2]*dx[2]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs4(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs14(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[2]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 
  rdxFnu[1] = 64.0*nu[3]/(dx[3]*dx[3]*dx[3]*dx[3]*dx[3]*dx[3]); 


  return (rdxFnu[0]+rdxFnu[1])*0.9;

} 
double ConstHyperDiffusion6Vol4xTensorP2_diffDirs1(const double *w, const double *dx, const double *nu, const double *f, double *out) 
{ 
  // w[4]:   Cell-center coordinates.
  // dx[4]:  Cell spacing.
  // nu[4]:  diffusion coefficient (collisionality).
  // f:      Input distribution function.
  // out:    Incremented output 
  double rdxFnu[1]; 
  rdxFnu[0] = 64.0*nu[0]/(dx[0]*dx[0]*dx[0]*dx[0]*dx[0]*dx[0]); 


  return (rdxFnu[0])*0.9;

} 
